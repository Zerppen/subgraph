// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LogAnySwapIn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogAnySwapIn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogAnySwapIn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LogAnySwapIn", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): LogAnySwapIn | null {
    return changetype<LogAnySwapIn | null>(
      store.get("LogAnySwapIn", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get txhash(): Bytes {
    let value = this.get("txhash");
    return value!.toBytes();
  }

  set txhash(value: Bytes) {
    this.set("txhash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fromChainID(): BigInt {
    let value = this.get("fromChainID");
    return value!.toBigInt();
  }

  set fromChainID(value: BigInt) {
    this.set("fromChainID", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogAnySwapOut extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogAnySwapOut entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogAnySwapOut must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LogAnySwapOut", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): LogAnySwapOut | null {
    return changetype<LogAnySwapOut | null>(
      store.get("LogAnySwapOut", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fromChainID(): BigInt {
    let value = this.get("fromChainID");
    return value!.toBigInt();
  }

  set fromChainID(value: BigInt) {
    this.set("fromChainID", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogAnySwapTradeTokensForNative extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LogAnySwapTradeTokensForNative entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogAnySwapTradeTokensForNative must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "LogAnySwapTradeTokensForNative",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): LogAnySwapTradeTokensForNative | null {
    return changetype<LogAnySwapTradeTokensForNative | null>(
      store.get("LogAnySwapTradeTokensForNative", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value!.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOutMin(): BigInt {
    let value = this.get("amountOutMin");
    return value!.toBigInt();
  }

  set amountOutMin(value: BigInt) {
    this.set("amountOutMin", Value.fromBigInt(value));
  }

  get fromChainID(): BigInt {
    let value = this.get("fromChainID");
    return value!.toBigInt();
  }

  set fromChainID(value: BigInt) {
    this.set("fromChainID", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogAnySwapTradeTokensForTokens extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LogAnySwapTradeTokensForTokens entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogAnySwapTradeTokensForTokens must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "LogAnySwapTradeTokensForTokens",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): LogAnySwapTradeTokensForTokens | null {
    return changetype<LogAnySwapTradeTokensForTokens | null>(
      store.get("LogAnySwapTradeTokensForTokens", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value!.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOutMin(): BigInt {
    let value = this.get("amountOutMin");
    return value!.toBigInt();
  }

  set amountOutMin(value: BigInt) {
    this.set("amountOutMin", Value.fromBigInt(value));
  }

  get fromChainID(): BigInt {
    let value = this.get("fromChainID");
    return value!.toBigInt();
  }

  set fromChainID(value: BigInt) {
    this.set("fromChainID", Value.fromBigInt(value));
  }

  get toChainID(): BigInt {
    let value = this.get("toChainID");
    return value!.toBigInt();
  }

  set toChainID(value: BigInt) {
    this.set("toChainID", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
